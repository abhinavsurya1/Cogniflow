
import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import AnimatedSection from "@/components/AnimatedSection";
import AnimatedText from "@/components/AnimatedText";
import { ChevronLeft, ChevronRight, Quote } from "lucide-react";

const testimonials = [
  {
    id: 1,
    name: "Sarah Johnson",
    role: "Marketing Director, TechCorp",
    content: "NeuroSyncAI has completely transformed our workflow. We've seen a 40% increase in productivity and our team can finally focus on creative work instead of mundane tasks.",
    avatar: "https://randomuser.me/api/portraits/women/1.jpg",
  },
  {
    id: 2,
    name: "Michael Chen",
    role: "Product Manager, InnovateLabs",
    content: "The insights generated by NeuroSyncAI are incredible. It's like having a data scientist and a strategist working for you 24/7. Game-changing for our product development.",
    avatar: "https://randomuser.me/api/portraits/men/2.jpg",
  },
  {
    id: 3,
    name: "Emily Rodriguez",
    role: "CEO, FutureScale",
    content: "As a startup CEO, I need tools that scale with us. NeuroSyncAI not only met our needs now but has features we'll grow into. The ROI has been undeniable.",
    avatar: "https://randomuser.me/api/portraits/women/3.jpg",
  },
  {
    id: 4, 
    name: "David Kim",
    role: "CTO, DataDrive",
    content: "The integrations are seamless, and the API is a dream to work with. We've built custom workflows that have cut our analysis time by 70%. Best tech investment we've made.",
    avatar: "https://randomuser.me/api/portraits/men/4.jpg",
  },
];

const Testimonials = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [autoplay, setAutoplay] = useState(true);
  
  useEffect(() => {
    let timer: number;
    if (autoplay) {
      timer = window.setInterval(() => {
        setCurrentIndex((prev) => (prev + 1) % testimonials.length);
      }, 5000);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [autoplay]);
  
  const handlePrevious = () => {
    setAutoplay(false);
    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);
  };
  
  const handleNext = () => {
    setAutoplay(false);
    setCurrentIndex((prev) => (prev + 1) % testimonials.length);
  };
  
  return (
    <AnimatedSection className="container py-20" id="testimonials">
      <div className="text-center mb-16">
        <AnimatedText text="What Our Clients Say" className="text-3xl font-bold mb-4" />
        <AnimatedText 
          text="Trusted by innovative teams worldwide" 
          className="text-muted-foreground max-w-lg mx-auto"
          delay={0.1}
        />
      </div>
      
      <div className="relative max-w-4xl mx-auto">
        <div className="absolute -top-8 left-4 text-neon-purple opacity-30">
          <Quote size={60} />
        </div>
        
        <div className="min-h-[320px] glass-card p-8 relative overflow-hidden">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentIndex}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.5 }}
              className="space-y-6"
            >
              <p className="text-xl italic relative z-10">"{testimonials[currentIndex].content}"</p>
              
              <div className="flex items-center gap-4">
                <img 
                  src={testimonials[currentIndex].avatar} 
                  alt={testimonials[currentIndex].name}
                  className="w-12 h-12 rounded-full object-cover border-2 border-primary"
                />
                <div>
                  <p className="font-medium">{testimonials[currentIndex].name}</p>
                  <p className="text-sm text-muted-foreground">{testimonials[currentIndex].role}</p>
                </div>
              </div>
            </motion.div>
          </AnimatePresence>
          
          <div className="absolute bottom-8 right-8 flex items-center gap-2">
            {testimonials.map((_, i) => (
              <button
                key={i}
                onClick={() => {
                  setAutoplay(false);
                  setCurrentIndex(i);
                }}
                className={`w-2 h-2 rounded-full transition-all ${
                  i === currentIndex ? "w-6 bg-primary" : "bg-muted"
                }`}
                aria-label={`Go to testimonial ${i + 1}`}
              />
            ))}
          </div>
        </div>
        
        <div className="flex justify-center gap-4 mt-6">
          <button
            onClick={handlePrevious}
            className="p-2 rounded-full glass hover:bg-primary/10 transition-colors"
          >
            <ChevronLeft size={24} />
          </button>
          <button
            onClick={handleNext}
            className="p-2 rounded-full glass hover:bg-primary/10 transition-colors"
          >
            <ChevronRight size={24} />
          </button>
        </div>
      </div>
    </AnimatedSection>
  );
};

export default Testimonials;
